import { UseGuards } from '@nestjs/common';
import { Args, Query, Mutation, Resolver } from '@nestjs/graphql';

import { RelayPagination } from 'domain/shared/dtos/RelayPagination';
import { OffsetPagination } from 'domain/shared/dtos/OffsetPagination';
import { Where{{ pascalCase name }}UniqueDTO } from 'domain/dtos/repositories/{{ pascalCase name }}RepositoryDTO';

import { Count{{ pascalCasePlural name }}UseCase } from 'application/useCases/{{ camelCase name }}/count{{ pascalCasePlural name }}/Count{{ pascalCasePlural name }}UseCase';
import { Create{{ pascalCase name }}UseCase } from 'application/useCases/{{ camelCase name }}/create{{ pascalCase name }}/Create{{ pascalCase name }}UseCase';
import { Update{{ pascalCase name }}UseCase } from 'application/useCases/{{ camelCase name }}/update{{ pascalCase name }}/Update{{ pascalCase name }}UseCase';
import { Delete{{ pascalCase name }}UseCase } from 'application/useCases/{{ camelCase name }}/delete{{ pascalCase name }}/Delete{{ pascalCase name }}UseCase';
import { FindAll{{ pascalCasePlural name }}UseCase } from 'application/useCases/{{ camelCase name }}/findAll{{ pascalCasePlural name }}/FindAll{{ pascalCasePlural name }}UseCase';
import { Activate{{ pascalCase name }}UseCase } from 'application/useCases/{{ camelCase name }}/activate{{ pascalCase name }}/Activate{{ pascalCase name }}UseCase';
import { FindFirst{{ pascalCase name }}UseCase } from 'application/useCases/{{ camelCase name }}/findFirst{{ pascalCase name }}/FindFirst{{ pascalCase name }}UseCase';
import { FindUnique{{ pascalCase name }}UseCase } from 'application/useCases/{{ camelCase name }}/findUnique{{ pascalCase name }}/FindUnique{{ pascalCase name }}UseCase';
import { Deactivate{{ pascalCase name }}UseCase } from 'application/useCases/{{ camelCase name }}/deactivate{{ pascalCase name }}/Deactivate{{ pascalCase name }}UseCase';
import { CreateMany{{ pascalCasePlural name }}UseCase } from 'application/useCases/{{ camelCase name }}/createMany{{ pascalCasePlural name }}/CreateMany{{ pascalCasePlural name }}UseCase';
import { UpdateMany{{ pascalCasePlural name }}UseCase } from 'application/useCases/{{ camelCase name }}/updateMany{{ pascalCasePlural name }}/UpdateMany{{ pascalCasePlural name }}UseCase';
import { DeleteMany{{ pascalCasePlural name }}UseCase } from 'application/useCases/{{ camelCase name }}/deleteMany{{ pascalCasePlural name }}/DeleteMany{{ pascalCasePlural name }}UseCase';
import { PaginationCursor{{ pascalCasePlural name }}UseCase } from 'application/useCases/{{ camelCase name }}/paginationCursor{{ pascalCasePlural name }}/PaginationCursor{{ pascalCasePlural name }}UseCase';
import { PaginationOffset{{ pascalCasePlural name }}UseCase } from 'application/useCases/{{ camelCase name }}/paginationOffset{{ pascalCasePlural name }}/PaginationOffset{{ pascalCasePlural name }}UseCase';

import { GraphQLAuthGuard } from 'infrastructure/http/guard/graphql.guard';
import { {{ pascalCase name }}ViewModel } from 'infrastructure/http/view-models/{{ pascalCase name }}ViewModel';
import { {{ pascalCase name }}ResponseDTO } from 'infrastructure/http/dtos/{{ camelCase name }}/{{ pascalCase name }}ResponseDTO';
import {
  Create{{ pascalCase name }}Input,
  Update{{ pascalCase name }}Input,
  Delete{{ pascalCase name }}Input,
} from 'infrastructure/http/graphql/inputs/{{kebabCase name}}.input';
import {
  {{ pascalCase name }}Model,
  {{ pascalCasePlural name }}CursorConnection,
  {{ pascalCasePlural name }}OffsetConnection,
} from 'infrastructure/http/graphql/models/{{kebabCase name}}.model';
import {
  {{ pascalCasePlural name }}Args,
  {{ pascalCase name }}FirstArgs,
  {{ pascalCase name }}UniqueArgs,
  {{ pascalCasePlural name }}CountArgs,
  Pagination{{ pascalCasePlural name }}CursorArgs,
  Pagination{{ pascalCasePlural name }}OffsetArgs,
} from 'infrastructure/http/graphql/args/{{kebabCase name}}.args';

@Resolver(() => {{ pascalCase name }}Model)
export class {{ pascalCase name }}Resolver {
  constructor(
    private readonly count{{ pascalCasePlural name }}UseCase: Count{{ pascalCasePlural name }}UseCase,
    private readonly update{{ pascalCase name }}UseCase: Update{{ pascalCase name }}UseCase,
    private readonly create{{ pascalCase name }}UseCase: Create{{ pascalCase name }}UseCase,
    private readonly delete{{ pascalCase name }}UseCase: Delete{{ pascalCase name }}UseCase,
    private readonly findAll{{ pascalCasePlural name }}UseCase: FindAll{{ pascalCasePlural name }}UseCase,
    private readonly activate{{ pascalCase name }}UseCase: Activate{{ pascalCase name }}UseCase,
    private readonly findFirst{{ pascalCase name }}UseCase: FindFirst{{ pascalCase name }}UseCase,
    private readonly findUnique{{ pascalCase name }}UseCase: FindUnique{{ pascalCase name }}UseCase,
    private readonly deactivate{{ pascalCase name }}UseCase: Deactivate{{ pascalCase name }}UseCase,
    private readonly createMany{{ pascalCasePlural name }}UseCase: CreateMany{{ pascalCasePlural name }}UseCase,
    private readonly updateMany{{ pascalCasePlural name }}UseCase: UpdateMany{{ pascalCasePlural name }}UseCase,
    private readonly deleteMany{{ pascalCasePlural name }}UseCase: DeleteMany{{ pascalCasePlural name }}UseCase,
    private readonly paginationCursor{{ pascalCasePlural name }}UseCase: PaginationCursor{{ pascalCasePlural name }}UseCase,
    private readonly paginationOffset{{ pascalCasePlural name }}UseCase: PaginationOffset{{ pascalCasePlural name }}UseCase,
  ) {}

  // Queries

  @Query(() => Number)
  @UseGuards(GraphQLAuthGuard)
  async {{ camelCasePlural name }}Count(@Args() args: {{ pascalCasePlural name }}CountArgs): Promise<number> {
    return this.count{{ pascalCasePlural name }}UseCase.execute({ where: args.where });
  }

  @Query(() => {{ pascalCase name }}Model)
  @UseGuards(GraphQLAuthGuard)
  async {{ camelCase name }}First(@Args() args: {{ pascalCase name }}FirstArgs): Promise<{{ pascalCase name }}ResponseDTO> {
    const {{ camelCase name }} = await this.findFirst{{ pascalCase name }}UseCase.execute({ where: args.where });

    return {{ pascalCase name }}ViewModel.toHTTP({{ camelCase name }});
  }

  @Query(() => {{ pascalCase name }}Model)
  @UseGuards(GraphQLAuthGuard)
  async {{ camelCase name }}(@Args() args: {{ pascalCase name }}UniqueArgs): Promise<{{ pascalCase name }}ResponseDTO> {
    const {{ camelCase name }} = await this.findUnique{{ pascalCase name }}UseCase.execute({
      where: args.where as Where{{ pascalCase name }}UniqueDTO,
    });

    return {{ pascalCase name }}ViewModel.toHTTP({{ camelCase name }});
  }

  @Query(() => [{{ pascalCase name }}Model])
  @UseGuards(GraphQLAuthGuard)
  async {{ camelCasePlural name }}(@Args() args: {{ pascalCasePlural name }}Args): Promise<{{ pascalCase name }}ResponseDTO[]> {
    const {{ camelCasePlural name }} = await this.findAll{{ pascalCasePlural name }}UseCase.execute(args);

    return {{ camelCasePlural name }}.map({{ pascalCase name }}ViewModel.toHTTP);
  }

  @Query(() => {{ pascalCasePlural name }}OffsetConnection)
  @UseGuards(GraphQLAuthGuard)
  async {{ camelCasePlural name }}PaginationOffset(
    @Args() args: Pagination{{ pascalCasePlural name }}OffsetArgs,
  ): Promise<OffsetPagination<{{ pascalCase name }}ResponseDTO>> {
    const pagination = await this.paginationOffset{{ pascalCasePlural name }}UseCase.execute(args);

    return {
      ...pagination,
      nodes: pagination.nodes.map({{ pascalCase name }}ViewModel.toHTTP),
    };
  }

  @Query(() => {{ pascalCasePlural name }}CursorConnection)
  @UseGuards(GraphQLAuthGuard)
  async {{ camelCasePlural name }}PaginationCursor(
    @Args() args: Pagination{{ pascalCasePlural name }}CursorArgs,
  ): Promise<RelayPagination<{{ pascalCase name }}ResponseDTO>> {
    const pagination = await this.paginationCursor{{ pascalCasePlural name }}UseCase.execute(args);

    return {
      ...pagination,
      nodes: pagination.edges.map(edge => {{ pascalCase name }}ViewModel.toHTTP(edge.node)),
      edges: pagination.edges.map(edge => ({
        ...edge,
        node: {{ pascalCase name }}ViewModel.toHTTP(edge.node),
      })),
    };
  }

  // Mutations

  @Mutation(() => {{ pascalCase name }}Model)
  async create{{ pascalCase name }}(
    @Args('{{ camelCase name }}') {{ camelCase name }}: Create{{ pascalCase name }}Input,
  ): Promise<{{ pascalCase name }}ResponseDTO> {
    const new{{ pascalCase name }} = await this.create{{ pascalCase name }}UseCase.execute({{ camelCase name }});

    return {{ pascalCase name }}ViewModel.toHTTP(new{{ pascalCase name }});
  }

  @Mutation(() => [{{ pascalCase name }}Model])
  async createMany{{ pascalCasePlural name }}(
    @Args('{{ camelCase name }}', { type: () => [Create{{ pascalCase name }}Input] }) {{ camelCasePlural name }}: Create{{ pascalCase name }}Input[],
  ): Promise<{{ pascalCase name }}ResponseDTO[]> {
    const result = await this.createMany{{ pascalCasePlural name }}UseCase.execute({{ camelCasePlural name }});

    return result.map({{ pascalCase name }}ViewModel.toHTTP);
  }

  @Mutation(() => {{ pascalCase name }}Model)
  @UseGuards(GraphQLAuthGuard)
  async update{{ pascalCase name }}(
    @Args('{{ camelCase name }}') {{ camelCase name }}: Update{{ pascalCase name }}Input,
  ): Promise<{{ pascalCase name }}ResponseDTO> {
    const updated = await this.update{{ pascalCase name }}UseCase.execute({
      data: {{ camelCase name }}.data,
      where: {{ camelCase name }}.where as Where{{ pascalCase name }}UniqueDTO,
    });

    return {{ pascalCase name }}ViewModel.toHTTP(updated);
  }

  @Mutation(() => [{{ pascalCase name }}Model])
  @UseGuards(GraphQLAuthGuard)
  async updateMany{{ pascalCasePlural name }}(
    @Args('{{ camelCasePlural name }}', { type: () => [Update{{ pascalCase name }}Input] }) {{ camelCasePlural name }}: Update{{ pascalCase name }}Input[],
  ): Promise<{{ pascalCase name }}ResponseDTO[]> {
    const payload = {{ camelCasePlural name }}.map(({ data, where }) => ({
      data,
      where: where as Where{{ pascalCase name }}UniqueDTO,
    }));

    const result = await this.updateMany{{ pascalCasePlural name }}UseCase.execute(payload);

    return result.map({{ pascalCase name }}ViewModel.toHTTP);
  }

  @Mutation(() => {{ pascalCase name }}Model)
  @UseGuards(GraphQLAuthGuard)
  async delete{{ pascalCase name }}(
    @Args('{{ camelCase name }}') {{ camelCase name }}: Delete{{ pascalCase name }}Input,
  ): Promise<{{ pascalCase name }}ResponseDTO> {
    const result = await this.delete{{ pascalCase name }}UseCase.execute({
      where: {{ camelCase name }}.where as Where{{ pascalCase name }}UniqueDTO,
    });

    return {{ pascalCase name }}ViewModel.toHTTP(result);
  }

  @Mutation(() => [{{ pascalCase name }}Model])
  @UseGuards(GraphQLAuthGuard)
  async deleteMany{{ pascalCasePlural name }}(
    @Args('{{ camelCasePlural name }}', { type: () => [Delete{{ pascalCase name }}Input] }) {{ camelCasePlural name }}: Delete{{ pascalCase name }}Input[],
  ): Promise<{{ pascalCase name }}ResponseDTO[]> {
    const payload = {{ camelCasePlural name }}.map(({ where }) => ({
      where: where as Where{{ pascalCase name }}UniqueDTO,
    }));

    const result = await this.deleteMany{{ pascalCasePlural name }}UseCase.execute(payload);

    return result.map({{ pascalCase name }}ViewModel.toHTTP);
  }

  @Mutation(() => {{ pascalCase name }}Model)
  @UseGuards(GraphQLAuthGuard)
  async activate{{ pascalCase name }}(@Args() args: {{ pascalCase name }}UniqueArgs): Promise<{{ pascalCase name }}ResponseDTO> {
    const {{ camelCase name }} = await this.activate{{ pascalCase name }}UseCase.execute({
      where: args.where as Where{{ pascalCase name }}UniqueDTO,
    });

    return {{ pascalCase name }}ViewModel.toHTTP({{ camelCase name }});
  }

  @Mutation(() => {{ pascalCase name }}Model)
  @UseGuards(GraphQLAuthGuard)
  async deactivate{{ pascalCase name }}(@Args() args: {{ pascalCase name }}UniqueArgs): Promise<{{ pascalCase name }}ResponseDTO> {
    const {{ camelCase name }} = await this.deactivate{{ pascalCase name }}UseCase.execute({
      where: args.where as Where{{ pascalCase name }}UniqueDTO,
    });

    return {{ pascalCase name }}ViewModel.toHTTP({{ camelCase name }});
  }
}
