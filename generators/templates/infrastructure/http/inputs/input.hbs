import { Field, InputType, PartialType } from '@nestjs/graphql';

import { Type } from 'class-transformer';
import { GraphQLUUID } from 'graphql-scalars';
import { ValidateNested } from 'class-validator';
{{#if (some fields "type" "Date")}}
import { GraphQLDateTimeISO } from 'graphql-scalars';
{{/if}}

import { type {{ pascalCase name }}RequestDTO } from 'infrastructure/http/dtos/{{ camelCase name }}/{{ pascalCase name }}RequestDTO';
import { AtLeastOneField } from 'infrastructure/http/decorators/at-least-one-field.decorator';

{{#each fields}}
{{#if this.isEnum}}
import { {{pascalCase this.type}} } from 'infrastructure/http/graphql/generated/prisma/{{kebabCase this.type}}.enum';
{{/if}}
{{/each}}


@InputType()
@AtLeastOneField<{{pascalCase name}}WhereUniqueInput>([{{#each fields}}{{#if isUnique}}'{{name}}', {{/if}}{{/each}}'id'])
export class {{pascalCase name}}WhereUniqueInput {
  @Field(() => GraphQLUUID, { nullable: true })
  id?: string;

  {{#each fields}}
    {{#if isUnique}}
  @Field(() => {{mapTypeToGraphQLClass type}}, { nullable: true })
  {{name}}?: {{type}};

    {{/if}}
  {{/each}}
}

@InputType()
export class Create{{pascalCase name}}Input implements {{pascalCase name}}RequestDTO {
  {{#each fields}}
    {{#unless (or (eq this.name "created_at") (eq this.name "updated_at") (eq this.name "active"))}}
      {{#if this.isEnum}}
  @Field(() => {{pascalCase this.type}}, { nullable: true })
  {{snakeCase this.name}}?: {{pascalCase this.type}};

      {{else}}
        {{#if (or this.isOptional this.hasDefault)}}
  @Field(() => {{mapTypeToGraphQLClass this.type}}, { nullable: true })
  {{snakeCase this.name}}?: {{this.type}};

        {{else}}
  @Field(() => {{mapTypeToGraphQLClass this.type}})
  {{snakeCase this.name}}: {{this.type}};

        {{/if}}
      {{/if}}
    {{/unless}}
  {{/each}}
}

@InputType()
class UpdateData{{ pascalCase name }}Input extends PartialType(Create{{ pascalCase name }}Input) {}

@InputType()
export class Update{{ pascalCase name }}Input {
  @Field(() => UpdateData{{ pascalCase name }}Input)
  @ValidateNested()
  @Type(() => UpdateData{{ pascalCase name }}Input)
  data: UpdateData{{ pascalCase name }}Input;

  @Field(() => {{ pascalCase name }}WhereUniqueInput)
  @ValidateNested()
  @Type(() => {{ pascalCase name }}WhereUniqueInput)
  where: {{ pascalCase name }}WhereUniqueInput;
}

@InputType()
export class Delete{{ pascalCase name }}Input {
  @Field(() => {{ pascalCase name }}WhereUniqueInput)
  @ValidateNested()
  @Type(() => {{ pascalCase name }}WhereUniqueInput)
  where?: {{ pascalCase name }}WhereUniqueInput;
}
