import { ID, Field, ObjectType } from '@nestjs/graphql';

import * as Relay from 'graphql-relay';
{{#if (some fields "type" "Date")}}
import { GraphQLDateTimeISO } from 'graphql-scalars';
{{/if}}

import { OffsetPagination } from 'domain/shared/dtos/OffsetPagination';

import { {{ pascalCase name }}ResponseDTO } from 'infrastructure/http/dtos/{{ camelCase name }}/{{ pascalCase name }}ResponseDTO';
import { PageInfoCursor } from 'infrastructure/http/graphql/pagination/page-info';
import { PageInfoOffset } from 'infrastructure/http/graphql/pagination/page-info-offset';

{{#each fields}}
{{#if this.isEnum}}
import { {{pascalCase this.name}} } from 'infrastructure/http/graphql/generated/prisma/{{snakeCase this.name}}.enum';
{{/if}}
{{/each}}

@ObjectType()
export class {{ pascalCase name }}Model implements {{ pascalCase name }}ResponseDTO {
  @Field(() => ID)
  id: string;

{{#each fields}}
  {{#unless this.isHideField}}
    {{#if this.isEnum}}
  @Field(() => {{pascalCase this.name}})
  {{snakeCase this.name}}: {{pascalCase this.name}};

    {{else if (and this.isOptional (not this.hasDefault))}}
  @Field(() => {{mapTypeToGraphQLClass this.type}}, { nullable: true })
  {{snakeCase this.name}}?: {{this.type}};

    {{else}}
  @Field(() => {{mapTypeToGraphQLClass this.type}})
  {{snakeCase this.name}}: {{this.type}};

    {{/if}}
  {{/unless}}
{{/each}}
}

@ObjectType({ isAbstract: true })
abstract class {{ pascalCasePlural name }}Edge implements Relay.Edge<{{ pascalCase name }}Model> {
  @Field(() => {{ pascalCase name }}Model)
  readonly node: {{ pascalCase name }}Model;

  @Field(() => String)
  readonly cursor: Relay.ConnectionCursor;
}

@ObjectType()
export class {{ pascalCasePlural name }}CursorConnection implements Relay.Connection<{{ pascalCase name }}Model> {
  @Field(() => [{{ pascalCase name }}Model])
  nodes: {{ pascalCase name }}Model[];

  @Field(() => Number, { defaultValue: 0 })
  count: number = 0;

  @Field(() => PageInfoCursor)
  readonly pageInfo: PageInfoCursor;

  @Field(() => Number, { defaultValue: 0 })
  totalCount: number = 0;

  @Field(() => [{{ pascalCasePlural name }}Edge])
  readonly edges: Array<Relay.Edge<{{ pascalCase name }}Model>>;
}

@ObjectType()
export class {{ pascalCasePlural name }}OffsetConnection implements OffsetPagination<{{ pascalCase name }}Model> {
  @Field(() => [{{ pascalCase name }}Model])
  nodes: {{ pascalCase name }}Model[];

  @Field(() => Number, { defaultValue: 0 })
  count: number = 0;

  @Field(() => PageInfoOffset)
  readonly pageInfo: PageInfoOffset;

  @Field(() => Number, { defaultValue: 0 })
  totalCount: number = 0;
}
