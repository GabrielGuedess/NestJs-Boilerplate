import { I18nService } from 'nestjs-i18n';
import { Injectable } from '@nestjs/common';

import { I18nTranslations } from '@root/i18n/generated';
import { findManyCursorConnection } from '@devoxa/prisma-relay-cursor-connection';

import { {{ pascalCase name }} } from 'domain/entities/{{ camelCase name }}/{{ pascalCase name }}';
import { {{ pascalCase name }}Repository } from 'domain/repositories/{{ pascalCase name }}Repository';
import { RelayPagination } from 'domain/shared/dtos/RelayPagination';
import { AppError, StatusCode } from 'domain/shared/errors/AppError';
import { OffsetPagination } from 'domain/shared/dtos/OffsetPagination';
import {
  Count{{ pascalCasePlural name }}RequestDTO,
  Update{{ pascalCase name }}RequestDTO,
  Delete{{ pascalCase name }}RequestDTO,
  FindAll{{ pascalCasePlural name }}RequestDTO,
  FindFirst{{ pascalCase name }}RequestDTO,
  FindUnique{{ pascalCase name }}RequestDTO,
  PaginationOffset{{ pascalCasePlural name }}RequestDTO,
  PaginationCursor{{ pascalCasePlural name }}RequestDTO,
} from 'domain/dtos/repositories/{{ pascalCase name }}RepositoryDTO';

import { PrismaService } from 'infrastructure/database/prisma/prisma.service';
import { Prisma{{ pascalCase name }}Mapper } from 'infrastructure/database/prisma/mappers/Prisma{{ pascalCase name }}Mapper';

@Injectable()
export class Prisma{{ pascalCase name }}Repository implements {{ pascalCase name }}Repository {
  constructor(
    private readonly prisma: PrismaService,
    private readonly i18n: I18nService<I18nTranslations>,
  ) {}

  async count(parameters: Count{{ pascalCasePlural name }}RequestDTO): Promise<number> {
    const count = await this.prisma.{{ camelCase name }}.count({
      where: parameters.where,
    });

    return count;
  }

  async findAll(parameters: FindAll{{ pascalCasePlural name }}RequestDTO): Promise<{{ pascalCase name }}[]> {
    const {{ camelCasePlural name }} = await this.prisma.{{ camelCase name }}.findMany({
      where: parameters.where,
    });

    return {{ camelCasePlural name }}.map({{ camelCase name }} => Prisma{{ pascalCase name }}Mapper.toDomain({{ camelCase name }}));
  }

  async findFirst({
    where,
    returnError = true,
  }: FindFirst{{ pascalCase name }}RequestDTO): Promise<{{ pascalCase name }}> {
    const {{ camelCase name }} = await this.prisma.{{ camelCase name }}.findFirst({
      where,
    });

    if (!{{ camelCase name }} && returnError) {
      throw new AppError({
        statusCode: StatusCode.NOT_FOUND,
        message: this.i18n.t('repositories.ERROR_NOT_FOUND', {
          args: { name: '{{ pascalCase name }}' },
        }),
      });
    }

    return {{ camelCase name }} ? Prisma{{ pascalCase name }}Mapper.toDomain({{ camelCase name }}) : null;
  }

  async findUnique({
    where,
    returnError = true,
  }: FindUnique{{ pascalCase name }}RequestDTO): Promise<{{ pascalCase name }}> {
    const {{ camelCase name }} = await this.prisma.{{ camelCase name }}.findUnique({
      where,
    });

    if (!{{ camelCase name }} && returnError) {
      throw new AppError({
        statusCode: StatusCode.NOT_FOUND,
        message: this.i18n.t('repositories.ERROR_NOT_FOUND', {
          args: { name: '{{ pascalCase name }}' },
        }),
      });
    }

    return {{ camelCase name }} ? Prisma{{ pascalCase name }}Mapper.toDomain({{ camelCase name }}) : null;
  }

  async create({{ camelCase name }}: {{ pascalCase name }}): Promise<{{ pascalCase name }}> {
    const {{ camelCase name }}Exist = await this.prisma.{{ camelCase name }}.findUnique({
      where: {
        {{#if (some fields "isUnique")}}
          {{#each fields}}
            {{#if isUnique}}
              {{snakeCase name}}: {{../camelCase name}}.{{camelCase name}},
            {{/if}}
          {{/each}}
        {{else}}
          id: {{camelCase name}}.id,
        {{/if}}
     },
    });

    if ({{ camelCase name }}Exist) {
      throw new AppError({
        statusCode: StatusCode.CONFLICT,
        message: this.i18n.t('repositories.ERROR_ALREADY_EXISTS', {
          args: { name: '{{ pascalCase name }}' },
        }),
      });
    }

    const {{ camelCase name }}Prisma = await this.prisma.{{ camelCase name }}.create({
      data: Prisma{{ pascalCase name }}Mapper.toPrisma({{ camelCase name }}),
    });

    const {{ camelCase name }}Domain = Prisma{{ pascalCase name }}Mapper.toDomain({{ camelCase name }}Prisma);

    return {{ camelCase name }}Domain;
  }

  async paginationOffset(
    parameters: PaginationOffset{{ pascalCasePlural name }}RequestDTO,
  ): Promise<OffsetPagination<{{ pascalCase name }}>> {
    const [{{ camelCasePlural name }}, pageInfo] = await this.prisma.prismaExtended.{{ camelCase name }}
      .paginate({
        where: parameters.where ?? {},
        orderBy: parameters.order ?? {},
      })
      .withPages({
        includePageCount: true,
        page: parameters.page ?? 1,
        limit: parameters?.limit ?? 10,
      });

    const nodes = {{ camelCasePlural name }}.map({{ camelCase name }} => new {{ pascalCase name }}({{ camelCase name }}, {{ camelCase name }}.id));

    const totalCount = await this.prisma.{{ camelCase name }}.count({
      where: parameters.where ?? {},
    });

    return {
      nodes,
      pageInfo,
      totalCount,
      count: {{ camelCasePlural name }}?.length ?? 0,
    };
  }

  async delete(parameters: Delete{{ pascalCase name }}RequestDTO): Promise<{{ pascalCase name }}> {
    const {{ camelCase name }} = await this.prisma.{{ camelCase name }}.findUnique({
      where: parameters.where,
    });

    if (!{{ camelCase name }}) {
      throw new AppError({
        statusCode: StatusCode.NOT_FOUND,
        message: this.i18n.t('repositories.ERROR_NOT_FOUND', {
          args: { name: '{{ pascalCase name }}' },
        }),
      });
    }

    const {{ camelCase name }}Prisma = await this.prisma.{{ camelCase name }}.delete({
      where: parameters.where,
    });

    if (!{{ camelCase name }}Prisma) {
      throw new AppError({
        statusCode: StatusCode.BAD_REQUEST,
        message: this.i18n.t('repositories.ERROR_NOT_DELETED', {
          args: { name: '{{ pascalCase name }}' },
        }),
      });
    }

    const {{ camelCase name }}Domain = Prisma{{ pascalCase name }}Mapper.toDomain({{ camelCase name }}Prisma);

    return {{ camelCase name }}Domain;
  }

  async createMany({{ camelCasePlural name }}: {{ pascalCase name }}[]): Promise<{{ pascalCase name }}[]> {
    const created{{ pascalCasePlural name }}: {{ pascalCase name }}[] = [];

    await Promise.all(
      {{ camelCasePlural name }}.map(async {{ camelCase name }} => {
        const {{ camelCase name }}Exist = await this.prisma.{{ camelCase name }}.findUnique({
          where: {
            {{#if (some fields "isUnique")}}
              {{#each fields}}
                {{#if isUnique}}
                  {{snakeCase name}}: {{../camelCase name}}.{{camelCase name}},
                {{/if}}
              {{/each}}
            {{else}}
              id: {{camelCase name}}.id,
            {{/if}}
           },
        });

        if ({{ camelCase name }}Exist) {
          throw new AppError({
            statusCode: StatusCode.CONFLICT,
            message: this.i18n.t('repositories.ERROR_ALREADY_EXISTS', {
              args: { name: '{{ pascalCase name }}' },
            }),
          });
        }

        const {{ camelCase name }}Prisma = await this.prisma.{{ camelCase name }}.create({
          data: Prisma{{ pascalCase name }}Mapper.toPrisma({{ camelCase name }}),
        });

        const {{ camelCase name }}Domain = Prisma{{ pascalCase name }}Mapper.toDomain({{ camelCase name }}Prisma);

        created{{ pascalCasePlural name }}.push({{ camelCase name }}Domain);
      }),
    );

    return created{{ pascalCasePlural name }};
  }

  async update(parameters: Update{{ pascalCase name }}RequestDTO): Promise<{{ pascalCase name }}> {
    const {{ camelCase name }} = await this.prisma.{{ camelCase name }}.findUnique({
      where: parameters.where,
    });

    if (!{{ camelCase name }}) {
      throw new AppError({
        statusCode: StatusCode.NOT_FOUND,
        message: this.i18n.t('repositories.ERROR_NOT_FOUND', {
          args: { name: '{{ pascalCase name }}' },
        }),
      });
    }

    const {{ camelCase name }}Prisma = await this.prisma.{{ camelCase name }}.update({
      data: parameters.data,
      where: parameters.where,
    });

    if (!{{ camelCase name }}Prisma) {
      throw new AppError({
        statusCode: StatusCode.BAD_REQUEST,
        message: this.i18n.t('repositories.ERROR_NOT_UPDATED', {
          args: { name: '{{ pascalCase name }}' },
        }),
      });
    }

    const {{ camelCase name }}Domain = Prisma{{ pascalCase name }}Mapper.toDomain({{ camelCase name }}Prisma);

    return {{ camelCase name }}Domain;
  }

  async activate(parameters: Delete{{ pascalCase name }}RequestDTO): Promise<{{ pascalCase name }}> {
    const {{ camelCase name }} = await this.prisma.{{ camelCase name }}.findUnique({
      where: parameters.where,
    });

    if (!{{ camelCase name }}) {
      throw new AppError({
        statusCode: StatusCode.NOT_FOUND,
        message: this.i18n.t('repositories.ERROR_NOT_FOUND', {
          args: { name: '{{ pascalCase name }}' },
        }),
      });
    }

    const {{ camelCase name }}Prisma = await this.prisma.{{ camelCase name }}.update({
      data: { active: true },
      where: parameters.where,
    });

    if (!{{ camelCase name }}Prisma) {
      throw new AppError({
        statusCode: StatusCode.BAD_REQUEST,
        message: this.i18n.t('repositories.ERROR_NOT_UPDATED', {
          args: { name: '{{ pascalCase name }}' },
        }),
      });
    }

    const {{ camelCase name }}Domain = Prisma{{ pascalCase name }}Mapper.toDomain({{ camelCase name }}Prisma);

    return {{ camelCase name }}Domain;
  }

  async deactivate(parameters: Delete{{ pascalCase name }}RequestDTO): Promise<{{ pascalCase name }}> {
    const {{ camelCase name }} = await this.prisma.{{ camelCase name }}.findUnique({
      where: parameters.where,
    });

    if (!{{ camelCase name }}) {
      throw new AppError({
        statusCode: StatusCode.NOT_FOUND,
        message: this.i18n.t('repositories.ERROR_NOT_FOUND', {
          args: { name: '{{ pascalCase name }}' },
        }),
      });
    }

    const {{ camelCase name }}Prisma = await this.prisma.{{ camelCase name }}.update({
      data: { active: false },
      where: parameters.where,
    });

    if (!{{ camelCase name }}Prisma) {
      throw new AppError({
        statusCode: StatusCode.BAD_REQUEST,
        message: this.i18n.t('repositories.ERROR_NOT_UPDATED', {
          args: { name: '{{ pascalCase name }}' },
        }),
      });
    }

    const {{ camelCase name }}Domain = Prisma{{ pascalCase name }}Mapper.toDomain({{ camelCase name }}Prisma);

    return {{ camelCase name }}Domain;
  }

  async deleteMany(parameters: Delete{{ pascalCase name }}RequestDTO[]): Promise<{{ pascalCase name }}[]> {
    const {{ camelCasePlural name }}: {{ pascalCase name }}[] = [];

    await Promise.all(
      parameters.map(async ({ where }) => {
        const {{ camelCase name }} = await this.prisma.{{ camelCase name }}.findUnique({
          where,
        });

        if (!{{ camelCase name }}) {
          throw new AppError({
            statusCode: StatusCode.NOT_FOUND,
            message: this.i18n.t('repositories.ERROR_NOT_FOUND', {
              args: { name: '{{ pascalCase name }}' },
            }),
          });
        }

        const {{ camelCase name }}Prisma = await this.prisma.{{ camelCase name }}.delete({
          where,
        });

        if (!{{ camelCase name }}Prisma) {
          throw new AppError({
            statusCode: StatusCode.BAD_REQUEST,
            message: this.i18n.t('repositories.ERROR_NOT_DELETED', {
              args: { name: '{{ pascalCase name }}' },
            }),
          });
        }

        const {{ camelCase name }}Domain = Prisma{{ pascalCase name }}Mapper.toDomain({{ camelCase name }}Prisma);

        {{ camelCasePlural name }}.push({{ camelCase name }}Domain);
      }),
    );

    return {{ camelCasePlural name }};
  }

  async updateMany(parameters: Update{{ pascalCase name }}RequestDTO[]): Promise<{{ pascalCase name }}[]> {
    const {{ camelCasePlural name }}: {{ pascalCase name }}[] = [];

    await Promise.all(
      parameters.map(async ({ data, where }) => {
        const {{ camelCase name }} = await this.prisma.{{ camelCase name }}.findUnique({
          where,
        });

        if (!{{ camelCase name }}) {
          throw new AppError({
            statusCode: StatusCode.NOT_FOUND,
            message: this.i18n.t('repositories.ERROR_NOT_FOUND', {
              args: { name: '{{ pascalCase name }}' },
            }),
          });
        }

        const {{ camelCase name }}Prisma = await this.prisma.{{ camelCase name }}.update({
          where,
          data: {
            ...data,
            updated_at: new Date(),
          },
        });

        if (!{{ camelCase name }}Prisma) {
          throw new AppError({
            statusCode: StatusCode.BAD_REQUEST,
            message: this.i18n.t('repositories.ERROR_NOT_UPDATED', {
              args: { name: '{{ pascalCase name }}' },
            }),
          });
        }

        const {{ camelCase name }}Domain = Prisma{{ pascalCase name }}Mapper.toDomain({{ camelCase name }}Prisma);

        {{ camelCasePlural name }}.push({{ camelCase name }}Domain);
      }),
    );

    return {{ camelCasePlural name }};
  }

  async paginationCursor(
    parameters: PaginationCursor{{ pascalCasePlural name }}RequestDTO,
  ): Promise<RelayPagination<{{ pascalCase name }}>> {
    const keys = Object.keys(parameters.order ?? {});

    if (keys?.length > 1) {
      throw new AppError({
        statusCode: StatusCode.CONFLICT,
        message: this.i18n.t('repositories.ERROR_SORT_MULTIPLE_PARAMS'),
      });
    }

    const relay = await findManyCursorConnection(
      args =>
        this.prisma.{{ camelCase name }}.findMany({
          ...args,
          orderBy: parameters.order,
          where: parameters.where ?? {},
        }),
      () => this.prisma.{{ camelCase name }}.count(),
      {
        last: parameters.last,
        first: parameters.first,
        after: parameters.after,
        before: parameters.before,
      },
      {
        getCursor: record => ({ id: record.id }),
      },
    );

    const edges = relay.edges.map(edge => ({
      ...edge,
      node: new {{ pascalCase name }}(edge.node, edge.node.id),
    }));

    const nodes = relay.edges.map(edge => new {{ pascalCase name }}(edge.node, edge.node.id));

    return {
      edges,
      nodes,
      count: edges.length,
      totalCount: relay.totalCount,
      pageInfo: {
        endCursor: relay.pageInfo.endCursor,
        hasNextPage: relay.pageInfo.hasNextPage,
        startCursor: relay.pageInfo.startCursor,
        hasPreviousPage: relay.pageInfo.hasPreviousPage,
      },
    };
  }
}
