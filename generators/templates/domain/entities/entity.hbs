import { uuidv7 } from 'uuidv7';

import { Entity } from 'domain/shared/entities/Entity';
import { type Replace } from 'domain/shared/helpers/Replace';
import { NotificationError } from 'domain/shared/notification/NotificationError';

{{#each fields}}
  {{#if this.isEnum}}
    export type {{pascalCase this.name}}Props =
      {{#each enumType}}
        '{{this}}'{{#unless @last}} | {{/unless}}
      {{/each}};
  {{/if}}
{{/each}}

interface I{{pascalCase name}} {
  {{#each fields}}
    {{#if this.isEnum}}
      {{snakeCase this.name}}: {{pascalCase this.name}}Props;
    {{else}}
      {{#if this.isOptional}}
        {{snakeCase this.name}}?: {{this.type}};
      {{else}}
        {{snakeCase this.name}}: {{this.type}};
      {{/if}}
    {{/if}}
  {{/each}}
}

export class {{pascalCase name}} extends Entity {
  private _id: string;

  private props: I{{pascalCase name}};

constructor(
  props: Replace<
    I{{pascalCase name}},
    {
      {{#each fields}}
        {{#if this.isEnum}}
          {{snakeCase this.name}}?: {{pascalCase this.name}}Props;
        {{else if this.hasDefault}}
          {{snakeCase this.name}}?: {{this.type}};
        {{/if}}
      {{/each}}
    }
  >,
  id?: string,
) {
    super();

    this._id = id ?? uuidv7();
    this.props = {
      ...props,
      {{#each fields}}
        {{#if this.hasDefault}}
          {{#if this.isEnum}}
            {{snakeCase this.name}}: props.{{snakeCase this.name}} ?? '{{{this.defaultValue}}}',
          {{else if (eq this.defaultValue 'now(')}}
            {{snakeCase this.name}}: props.{{snakeCase this.name}} ?? new Date(),
          {{else}}
            {{snakeCase this.name}}: props.{{snakeCase this.name}} ?? {{{this.defaultValue}}},
          {{/if}}
        {{/if}}
      {{/each}}
    };

    this.validate();

    if (this.notification.hasErrors()) {
      const errors = this.notification.getErrors();

      throw new NotificationError(errors);
    }
  }

  private validate() {
    {{#each fields}}
      {{#unless isOptional}}
        {{#unless hasDefault}}
          {{#if (eq type 'string')}}
            if (
              this.props.{{name}} === undefined ||
              this.props.{{name}} === null ||
              this.props.{{name}}.trim() === ''
            ) {
              this.notification.addError({
                context: '{{snakeCase ../name}}',
                message: '{{name}} is required!',
              });
            }
          {{/if}}
        {{/unless}}
      {{/unless}}
    {{/each}}
}

{{#each fields}}
  {{#if this.isEnum}}
    public set {{camelCase this.name}}({{snakeCase this.name}}: {{pascalCase this.name}}Props) {
      this.props.{{snakeCase this.name}} = {{snakeCase this.name}};
    }

    public get {{camelCase this.name}}(): {{pascalCase this.name}}Props {
      return this.props.{{snakeCase this.name}};
    }
  {{else}}
    {{#unless (eq this.name "created_at")}}
    public set {{camelCase this.name}}({{snakeCase this.name}}: {{this.type}}) {
      this.props.{{snakeCase this.name}} = {{snakeCase this.name}};
    }
    {{/unless}}

    public get {{camelCase this.name}}(): {{this.type}} {
      return this.props.{{snakeCase this.name}};
    }
  {{/if}}
{{/each}}

  public get id(): string {
    return this._id;
  }
}
