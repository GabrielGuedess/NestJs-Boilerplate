import { {{pascalCase name}} } from 'domain/entities/{{camelCase name}}/{{pascalCase name}}';

describe('{{pascalCase name}}', () => {
  it('should be able to create a {{convertToLowerWords name}} with entity', () => {
    const {{camelCase name}} = new {{pascalCase name}}({
    {{#each data}}
    {{#notStartsWithUppercase name}}
    {{#isNotPrismaType type}}
    {{#if (eq (typeWithoutQuestion type) "String")}}
      {{snakeCase name}}: 'Test',
    {{else if (eq (typeWithoutQuestion type) "Int")}}
      {{snakeCase name}}: 1,
    {{else if (eq (typeWithoutQuestion type) "Float")}}
      {{snakeCase name}}: 1.0,
    {{else if (eq (typeWithoutQuestion type) "Boolean")}}
      {{snakeCase name}}: true,
    {{else if (eq (typeWithoutQuestion type) "DateTime")}}
      {{snakeCase name}}: new Date('2003-03-21'),
    {{else}}
      {{snakeCase name}}: null,
    {{/if}}
    {{/isNotPrismaType}}
    {{/notStartsWithUppercase}}
    {{/each}}
    });

    expect({{camelCase name}}).toBeTruthy();
  });

  it('should be able to set and get props {{convertToLowerWords name}} with entity', () => {
    const {{camelCase name}} = new {{pascalCase name}}({
    {{#each data}}
    {{#notStartsWithUppercase name}}
    {{#isNotPrismaType type}}
    {{#if (eq (typeWithoutQuestion type) "String")}}
      {{snakeCase name}}: 'Test',
    {{else if (eq (typeWithoutQuestion type) "Int")}}
      {{snakeCase name}}: 1,
    {{else if (eq (typeWithoutQuestion type) "Float")}}
      {{snakeCase name}}: 1.0,
    {{else if (eq (typeWithoutQuestion type) "Boolean")}}
      {{snakeCase name}}: true,
    {{else if (eq (typeWithoutQuestion type) "DateTime")}}
      {{snakeCase name}}: new Date('21-03-2003'),
    {{else}}
      {{snakeCase name}}: '123';
    {{/if}}
    {{/isNotPrismaType}}
    {{/notStartsWithUppercase}}
    {{/each}}
    });

    {{#each data}}
    {{#notStartsWithUppercase name}}
    {{#isNotPrismaType type}}
      expect({{camelCase ../name}}.{{camelCase name}}).toBeTruthy();
    {{/isNotPrismaType}}
    {{/notStartsWithUppercase}}
    {{/each}}


    {{#each data}}
    {{#notStartsWithUppercase name}}
    {{#isNotPrismaType type}}
    {{#unless (or (eq name "id") (eq name "created_at"))}}
      {{#if (eq (typeWithoutQuestion type) "String")}}
        {{camelCase ../name}}.{{camelCase name}} = 'Test 2';
      {{else if (eq (typeWithoutQuestion type) "Int")}}
        {{camelCase ../name}}.{{camelCase name}} = 2;
      {{else if (eq (typeWithoutQuestion type) "Float")}}
        {{camelCase ../name}}.{{camelCase name}} = 2.0;
      {{else if (eq (typeWithoutQuestion type) "Boolean")}}
        {{camelCase ../name}}.{{camelCase name}} = false;
      {{else if (eq (typeWithoutQuestion type) "DateTime")}}
        {{camelCase ../name}}.{{camelCase name}} = new Date('2003-03-22');
      {{else}}
        {{camelCase ../name}}.{{camelCase name}} = '321';
      {{/if}}
    {{/unless}}
    {{/isNotPrismaType}}
    {{/notStartsWithUppercase}}
    {{/each}}

    {{#each data}}
    {{#notStartsWithUppercase name}}
    {{#isNotPrismaType type}}
    {{#unless (or (eq name "id") (eq name "created_at"))}}
      {{#if (eq (typeWithoutQuestion type) "String")}}
        expect({{camelCase ../name}}.{{camelCase name}}).toBe('Test 2');
      {{else if (eq (typeWithoutQuestion type) "Int")}}
        expect({{camelCase ../name}}.{{camelCase name}}).toBe(2);
      {{else if (eq (typeWithoutQuestion type) "Float")}}
        expect({{camelCase ../name}}.{{camelCase name}}).toBe(2.0);
      {{else if (eq (typeWithoutQuestion type) "Boolean")}}
        expect({{camelCase ../name}}.{{camelCase name}}).toBe(false);
      {{else if (eq (typeWithoutQuestion type) "DateTime")}}
        expect({{camelCase ../name}}.{{camelCase name}}).toEqual(new Date('2003-03-22'));
      {{else}}
        expect({{camelCase ../name}}.{{camelCase name}}).toBe('321');
      {{/if}}
    {{/unless}}
    {{/isNotPrismaType}}
    {{/notStartsWithUppercase}}
    {{/each}}
  });

  it('should not be able to create a {{convertToLowerWords name}} with entity with error', () => {
    expect(() => {
      new {{pascalCase name}}({
    {{#each data}}
    {{#notStartsWithUppercase name}}
    {{#isNotPrismaType type}}
      {{#if (eq (typeWithoutQuestion type) "String")}}
        {{snakeCase name}}: '',
      {{else if (eq (typeWithoutQuestion type) "Int")}}
       {{snakeCase name}}: 0,
      {{else if (eq (typeWithoutQuestion type) "Float")}}
        {{snakeCase name}}: 2.0,
      {{/if}}
    {{/isNotPrismaType}}
    {{/notStartsWithUppercase}}
    {{/each}}
      });
    }).toThrow();
  });
});
