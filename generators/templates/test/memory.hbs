import { type {{ pascalCase name }} } from 'domain/entities/{{ camelCase name }}/{{ pascalCase name }}';
import { type {{ pascalCase name }}Repository } from 'domain/repositories/{{ pascalCase name }}Repository';
import { type RelayPagination } from 'domain/shared/dtos/RelayPagination';
import {
  type Find{{ pascalCase name }}RequestDTO,
  type Update{{ pascalCase name }}RequestDTO,
  type FindAll{{ pascalCasePlural name }}RequestDTO,
} from 'domain/dtos/repositories/{{ pascalCase name }}RepositoryDTO';

export class InMemory{{ pascalCase name }}Repository implements {{ pascalCase name }}Repository {
  public {{ camelCasePlural name }}: {{ pascalCase name }}[] = [];

  async count(): Promise<number> {
    return this.{{ camelCasePlural name }}.length;
  }

  async create({{ camelCase name }}: {{ pascalCase name }}): Promise<{{ pascalCase name }}> {
    const is{{ pascalCase name }}Exist = this.{{ camelCasePlural name }}.some(item => item.id === {{ camelCase name }}.id);

    if (is{{ pascalCase name }}Exist) {
      throw new Error('{{ pascalCase name }} already exists!');
    }

    this.{{ camelCasePlural name }}.push({{ camelCase name }});

    return {{ camelCase name }};
  }

  async delete(id: string): Promise<{{ pascalCase name }}> {
    const {{ camelCase name }} = this.{{ camelCasePlural name }}.find(item => item.id === id);

    if (!{{ camelCase name }}) {
      throw new Error('{{ pascalCase name }} not found!');
    }

    const {{ camelCase name }}Index = this.{{ camelCasePlural name }}.findIndex(item => item.id === {{ camelCase name }}.id);

    this.{{ camelCasePlural name }}.splice({{ camelCase name }}Index, 1);

    return {{ camelCase name }};
  }

  async findUnique(params: Find{{ pascalCase name }}RequestDTO): Promise<{{ pascalCase name }}> {
    const {{ camelCase name }} = this.{{ camelCasePlural name }}.find(
      item =>
        item.id === params.where.id
    );

    if (!{{ camelCase name }}) {
      throw new Error('{{ pascalCase name }} not found!');
    }

    return {{ camelCase name }};
  }

  async update(params: Update{{ pascalCase name }}RequestDTO): Promise<{{ pascalCase name }}> {
    const {{ camelCase name }} = this.{{ camelCasePlural name }}.find(item => item.id === params.id);

    if (!{{ camelCase name }}) {
      throw new Error('{{ pascalCase name }} not found!');
    }

    const {{ camelCase name }}Index = this.{{ camelCasePlural name }}.findIndex(item => item.id === {{ camelCase name }}.id);

    {{ camelCase name }}.description = params.description;

    this.{{ camelCasePlural name }}[{{ camelCase name }}Index] = {{ camelCase name }};

    return {{ camelCase name }};
  }

  async deleteMany(ids: string[]): Promise<{{ pascalCase name }}[]> {
    const {{ camelCasePlural name }}: {{ pascalCase name }}[] = [];

    for (const id of ids) {
      const {{ camelCase name }} = this.{{ camelCasePlural name }}.find(item => item.id === id);

      if (!{{ camelCase name }}) {
        throw new Error('{{ pascalCase name }} not found!');
      }

      const {{ camelCase name }}Index = this.{{ camelCasePlural name }}.findIndex(item => item.id === {{ camelCase name }}.id);

      this.{{ camelCasePlural name }}.splice({{ camelCase name }}Index, 1);

      {{ camelCasePlural name }}.push({{ camelCase name }});
    }

    return {{ camelCasePlural name }};
  }

  async updateMany(params: Update{{ pascalCase name }}RequestDTO[]): Promise<{{ pascalCase name }}[]> {
    const {{ camelCasePlural name }}: {{ pascalCase name }}[] = [];

    for (const current of params) {
      const {{ camelCase name }} = this.{{ camelCasePlural name }}.find(item => item.id === current.id);

      if (!{{ camelCase name }}) {
        throw new Error('{{ pascalCase name }} not found!');
      }

      const {{ camelCase name }}Index = this.{{ camelCasePlural name }}.findIndex(item => item.id === {{ camelCase name }}.id);

      {{ camelCase name }}.description = current.description;

      this.{{ camelCasePlural name }}[{{ camelCase name }}Index] = {{ camelCase name }};
      {{ camelCasePlural name }}.push({{ camelCase name }});
    }

    return {{ camelCasePlural name }};
  }

  async findAll(
    params: FindAll{{ pascalCasePlural name }}RequestDTO,
  ): Promise<RelayPagination<{{ pascalCase name }}>> {
    const relay: RelayPagination<{{ pascalCase name }}> = {
      nodes: this.{{ camelCasePlural name }},
      count: this.{{ camelCasePlural name }}.length,
      totalCount: this.{{ camelCasePlural name }}.length,
      edges: this.{{ camelCasePlural name }}.map(item => ({
        node: item,
        cursor: item.id,
      })),
      pageInfo: {
        hasNextPage: false,
        hasPreviousPage: false,
        startCursor: this.{{ camelCasePlural name }}.slice(params.first, params.last)[0].id,
        endCursor: this.{{ camelCasePlural name }}.slice(params.first, params.last).at(-1).id,
      },
    };

    const edges = relay.edges.map(edge => ({
      ...edge,
      node: edge.node,
    }));

    const nodes = relay.edges.map(edge => edge.node);

    return {
      edges,
      nodes,
      count: relay.count,
      totalCount: relay.totalCount,
      pageInfo: {
        endCursor: relay.pageInfo.endCursor,
        hasNextPage: relay.pageInfo.hasNextPage,
        startCursor: relay.pageInfo.startCursor,
        hasPreviousPage: relay.pageInfo.hasPreviousPage,
      },
    };
  }
}
