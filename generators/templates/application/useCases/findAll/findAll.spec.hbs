import { InMemory{{ pascalCase name }}Repository } from '@test/repositories/in-memory-{{ kebabCase name }}-repository';

import { {{ pascalCase name }} } from 'domain/entities/{{ camelCase name }}/{{ pascalCase name }}';

import { FindAll{{ pascalCasePlural name }}UseCase } from 'application/useCases/{{ camelCase name }}/findAll{{ pascalCasePlural name }}/FindAll{{ pascalCasePlural name }}UseCase';

describe('Find All {{ pascalCasePlural name }}', () => {
  it('should be able to find all {{convertToLowerWords name}} with use case', async () => {
    const {{ camelCasePlural name }}Repository = new InMemory{{ pascalCase name }}Repository();

    const {{ camelCase name }}Exist = await {{ camelCasePlural name }}Repository.create(
      new {{ pascalCase name }}({
        description: 'Test',
      }),
    );

    const findAll{{ pascalCasePlural name }}UseCase = new FindAll{{ pascalCasePlural name }}UseCase({{ camelCasePlural name }}Repository);

    const found{{ pascalCasePlural name }} = await findAll{{ pascalCasePlural name }}UseCase.execute({});

    expect(found{{ pascalCasePlural name }}).toEqual({
      count: 1,
      totalCount: 1,
      nodes: [{{ camelCase name }}Exist],
      edges: [{ node: {{ camelCase name }}Exist, cursor: {{ camelCase name }}Exist.id }],
      pageInfo: {
        hasNextPage: false,
        hasPreviousPage: false,
        endCursor: {{ camelCase name }}Exist.id,
        startCursor: {{ camelCase name }}Exist.id,
      },
    });
  });
});
