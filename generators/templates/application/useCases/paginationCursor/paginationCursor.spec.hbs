import { InMemory{{ pascalCase name }}Repository } from '@test/repositories/in-memory-{{ kebabCase name }}-repository';

import { {{ pascalCase name }} } from 'domain/entities/{{ camelCase name }}/{{ pascalCase name }}';

import { PaginationCursor{{ pascalCasePlural name }}UseCase } from 'application/useCases/{{ camelCase name }}/paginationCursor{{ pascalCasePlural name }}/PaginationCursor{{ pascalCasePlural name }}UseCase';

describe('Pagination Cursor {{ pascalCasePlural name }}', () => {
  it('should be able to pagination cursor {{ pascalCasePlural name }} with use case', async () => {
    const {{ camelCase name }}Repository = new InMemory{{ pascalCase name }}Repository();

    const {{ camelCase name }}Exist = await {{ camelCase name }}Repository.create(
      new {{ pascalCase name }}({
        {{#each fields}}
          {{#unless (or this.hasDefault (eq this.name "created_at") (eq this.name "updated_at"))}}
            {{#unless this.isOptional}}
              {{snakeCase this.name}}: {{#if (eq this.type "string")}}'valid-{{snakeCase this.name}}'{{else if (eq this.type "number")}}123{{else if (eq this.type "boolean")}}true{{else if (eq this.type "Date")}}new Date(){{else}}'valid'{{/if}},
            {{/unless}}
          {{/unless}}
        {{/each}}
      }),
    );

    const paginationCursor{{ pascalCasePlural name }}UseCase = new PaginationCursor{{ pascalCasePlural name }}UseCase(
      {{ camelCase name }}Repository,
    );

    const found{{ pascalCasePlural name }} = await paginationCursor{{ pascalCasePlural name }}UseCase.execute({});

    expect(found{{ pascalCasePlural name }}).toEqual({
      count: 1,
      totalCount: 1,
      nodes: [{{ camelCase name }}Exist],
      edges: [{ node: {{ camelCase name }}Exist, cursor: {{ camelCase name }}Exist.id }],
      pageInfo: {
        hasNextPage: false,
        hasPreviousPage: false,
        endCursor: {{ camelCase name }}Exist.id,
        startCursor: {{ camelCase name }}Exist.id,
      },
    });
  });
});
