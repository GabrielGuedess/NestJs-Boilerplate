import { InMemory{{ pascalCase name }}Repository } from '@test/repositories/in-memory-{{ kebabCase name }}-repository';

import { {{ pascalCase name }} } from 'domain/entities/{{ camelCase name }}/{{ pascalCase name }}';

import { DeleteMany{{ pascalCasePlural name }}UseCase } from 'application/useCases/{{ camelCase name }}/deleteMany{{ pascalCasePlural name }}/DeleteMany{{ pascalCasePlural name }}UseCase';

describe('Delete {{ pascalCase name }}', () => {
  it('should be able to delete many a {{convertToLowerWords name}} with use case', async () => {
    const {{ camelCase name }}Repository = new InMemory{{ pascalCase name }}Repository();

    const deleteMany{{ pascalCasePlural name }}UseCase = new DeleteMany{{ pascalCasePlural name }}UseCase({{ camelCase name }}Repository);

    const {{ camelCase name }} = new {{ pascalCase name }}({
      description: 'Test'
    });

    await {{ camelCase name }}Repository.create({{ camelCase name }});

    const deleted{{ pascalCasePlural name }} = await deleteMany{{ pascalCasePlural name }}UseCase.execute([{{ camelCase name }}.id]);

    expect(deleted{{ pascalCasePlural name }}).toStrictEqual([{{ camelCase name }}]);
  });
});
