import { InMemory{{ pascalCase name }}Repository } from '@test/repositories/in-memory-{{ kebabCase name }}-repository';

import { {{ pascalCase name }} } from 'domain/entities/{{ camelCase name }}/{{ pascalCase name }}';

import { Count{{ pascalCasePlural name }}UseCase } from 'application/useCases/{{ camelCase name }}/count{{ pascalCasePlural name }}/Count{{ pascalCasePlural name }}UseCase';

describe('Count {{ pascalCasePlural name }}', () => {
  it('should be able to count all {{pascalCasePlural name}} with use case', async () => {
    const {{ camelCasePlural name }}Repository = new InMemory{{ pascalCase name }}Repository();

    const {{ camelCase name }} = new {{ pascalCase name }}({
      {{#each fields}}
        {{#unless (or this.hasDefault (eq this.name "created_at") (eq this.name "updated_at"))}}
          {{#unless this.isOptional}}
            {{snakeCase this.name}}: {{#if (eq this.type "string")}}'valid-{{snakeCase this.name}}'{{else if (eq this.type "number")}}123{{else if (eq this.type "boolean")}}true{{else if (eq this.type "Date")}}new Date(){{else}}'valid'{{/if}},
          {{/unless}}
        {{/unless}}
      {{/each}}
    });

    await {{ camelCasePlural name }}Repository.create({{ camelCase name }});

    const count{{ pascalCasePlural name }}UseCase = new Count{{ pascalCasePlural name }}UseCase({{ camelCasePlural name }}Repository);

    await count{{ pascalCasePlural name }}UseCase.execute({ where: {} });

    expect({{ camelCasePlural name }}Repository.{{ camelCasePlural name }}).toHaveLength(1);
  });
});
