import { InMemory{{ pascalCase name }}Repository } from '@test/repositories/in-memory-{{ kebabCase name }}-repository';

import { {{ pascalCase name }} } from 'domain/entities/{{ camelCase name }}/{{ pascalCase name }}';

import { UpdateMany{{ pascalCasePlural name }}UseCase } from 'application/useCases/{{ camelCase name }}/updateMany{{ pascalCasePlural name }}/UpdateMany{{ pascalCasePlural name }}UseCase';

describe('Update Many {{ pascalCasePlural name }}', () => {
  it('should be able to update many {{pascalCasePlural name}} with use case', async () => {
    const {{ camelCase name }}Repository = new InMemory{{ pascalCase name }}Repository();

    const {{ camelCase name }} = new {{ pascalCase name }}({
      {{#each fields}}
        {{#unless (or this.hasDefault (eq this.name "created_at") (eq this.name "updated_at"))}}
          {{#unless this.isOptional}}
            {{snakeCase this.name}}: {{#if (eq this.type "string")}}'valid-{{snakeCase this.name}}'{{else if (eq this.type "number")}}123{{else if (eq this.type "boolean")}}true{{else if (eq this.type "Date")}}new Date(){{else}}'valid'{{/if}},
          {{/unless}}
        {{/unless}}
      {{/each}}
    });

    await {{ camelCase name }}Repository.create({{ camelCase name }});

    const updateMany{{ pascalCasePlural name }}UseCase = new UpdateMany{{ pascalCasePlural name }}UseCase({{ camelCase name }}Repository);

    {{#each fields}}
      {{#if (and (not (eq this.name "id")) (not (eq this.name "created_at")) (not (eq this.name "updated_at")))}}
        {{#if @first}}
          const new{{ pascalCase name }} = {{#if (eq type "string")}}'Test2'{{else if (eq type "number")}}999{{else if (eq type "boolean")}}false{{else if (eq type "Date")}}new Date('2023-01-01'){{else}}'newValue'{{/if}};
        {{/if}}
      {{/if}}
    {{/each}}

    await updateMany{{ pascalCasePlural name }}UseCase.execute([
      {
        where: { id: {{ camelCase name }}.id },
        data: {
          {{#each fields}}
            {{#if (and (not (eq this.name "id")) (not (eq this.name "created_at")) (not (eq this.name "updated_at")))}}
              {{#if @first}}
                {{snakeCase name}}: new{{ pascalCase name }},
              {{/if}}
            {{/if}}
          {{/each}}
        },
      },
    ]);

      expect({{ camelCase name }}Repository.{{ camelCasePlural name }}[0].{{#each fields}}{{#if (and (not (eq this.name "id")) (not (eq this.name "created_at")) (not (eq this.name "updated_at")))}}{{#if @first}}{{camelCase name}}{{/if}}{{/if}}{{/each}}).toEqual(
      new{{#each fields}}{{#if (and (not (eq this.name "id")) (not (eq this.name "created_at")) (not (eq this.name "updated_at")))}}{{#if @first}}{{ pascalCase name }}{{/if}}{{/if}}{{/each}},
    );
  });
});
