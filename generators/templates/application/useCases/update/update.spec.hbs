import { InMemory{{ pascalCase name }}Repository } from '@test/repositories/in-memory-{{ kebabCase name }}-repository';

import { {{ pascalCase name }} } from 'domain/entities/{{ camelCase name }}/{{ pascalCase name }}';

import { Update{{ pascalCase name }}UseCase } from 'application/useCases/{{ camelCase name }}/update{{ pascalCase name }}/Update{{ pascalCase name }}UseCase';

describe('Update {{ pascalCase name }}', () => {
  it('should be able to update a {{convertToLowerWords name}} with use case', async () => {
    const {{ camelCase name }}Repository = new InMemory{{ pascalCase name }}Repository();

    const {{ camelCase name }} = new {{ pascalCase name }}({
      description: 'Test',
    });

    await {{ camelCase name }}Repository.create({{ camelCase name }});

    const update{{ pascalCase name }}UseCase = new Update{{ pascalCase name }}UseCase({{ camelCase name }}Repository);

    const newDescription = 'Test2';

    await update{{ pascalCase name }}UseCase.execute({
      id: {{ camelCase name }}.id,
      description: newDescription,
    });

    expect({{ camelCase name }}Repository.{{ camelCasePlural name }}[0].description).toEqual(newDescription);
  });
});
