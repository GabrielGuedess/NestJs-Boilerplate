# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthUserInput {
  email: EmailAddress!
  password: String!
}

type AuthUserModel {
  refresh_token: JWT!
  refresh_token_expires: DateTimeISO!
  token: JWT!
  token_expires: DateTimeISO!
  user: UserModel!
  user_id: UUID!
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input CreateUserInput {
  document: String!
  email: EmailAddress!
  full_name: String!
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DeleteUserInput {
  where: UserWhereUniqueInput!
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type Mutation {
  activateUser(where: UserWhereUniqueInput): UserModel!
  createManyUsers(user: [CreateUserInput!]!): [UserModel!]!
  createUser(avatar: Upload, user: CreateUserInput!): UserModel!
  deactivateUser(where: UserWhereUniqueInput): UserModel!
  deleteManyUsers(users: [DeleteUserInput!]!): [UserModel!]!
  deleteUser(user: DeleteUserInput!): UserModel!
  refreshToken: RefreshModel!
  signIn(signIn: AuthUserInput!): AuthUserModel!
  updateManyUsers(users: [UpdateUserInput!]!): [UserModel!]!
  updateUser(avatar: Upload, user: UpdateUserInput!): UserModel!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedUuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedUuidFilter
  notIn: [String!]
}

enum NullsOrder {
  first
  last
}

type PageInfoCursor {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type PageInfoOffset {
  currentPage: Float!
  isFirstPage: Boolean!
  isLastPage: Boolean!
  nextPage: Float
  previousPage: Float
}

type Query {
  user(where: UserWhereUniqueInput): UserModel!
  userFirst(where: UserWhereInput): UserModel!
  users(order: UserOrderByWithRelationInput, where: UserWhereInput): [UserModel!]!
  usersCount(where: UserWhereInput): Float!
  usersPaginationCursor(after: String, before: String, first: Float, last: Float, order: UserOrderByWithRelationInput, where: UserWhereInput): UsersCursorConnection!
  usersPaginationOffset(limit: Float = 10, order: UserOrderByWithRelationInput, page: Float, where: UserWhereInput): UsersOffsetConnection!
}

enum QueryMode {
  default
  insensitive
}

type RefreshModel {
  token: JWT!
  token_expires: DateTimeISO!
}

enum Role {
  ADMIN
  USER
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""
A field whose value is a generic Universally Unique Identifier: https://en.wikipedia.org/wiki/Universally_unique_identifier.
"""
scalar UUID

input UpdateDataUserInput {
  document: String
  email: EmailAddress
  full_name: String
  password: String
}

input UpdateUserInput {
  data: UpdateDataUserInput!
  where: UserWhereUniqueInput!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserCountAggregate {
  _all: Int!
  active: Int!
  avatar_url: Int!
  created_at: Int!
  document: Int!
  email: Int!
  full_name: Int!
  id: Int!
  role: Int!
  updated_at: Int!
  validated: Int!
}

type UserMaxAggregate {
  active: Boolean
  avatar_url: String
  created_at: DateTime
  document: String
  email: EmailAddress
  full_name: String
  id: String
  role: Role
  updated_at: DateTime
  validated: Boolean
}

type UserMinAggregate {
  active: Boolean
  avatar_url: String
  created_at: DateTime
  document: String
  email: EmailAddress
  full_name: String
  id: String
  role: Role
  updated_at: DateTime
  validated: Boolean
}

type UserModel {
  active: Boolean!
  avatar_url: URL
  created_at: DateTimeISO!
  document: String!
  email: EmailAddress!
  full_name: String!
  id: ID!
  role: Role!
  updated_at: DateTimeISO!
  validated: Boolean!
}

input UserOrderByWithRelationInput {
  active: SortOrder
  avatar_url: SortOrderInput
  created_at: SortOrder
  document: SortOrder
  email: SortOrder
  full_name: SortOrder
  id: SortOrder
  role: SortOrder
  updated_at: SortOrder
  validated: SortOrder
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  active: BoolFilter
  avatar_url: StringNullableFilter
  created_at: DateTimeFilter
  document: StringFilter
  email: StringFilter
  full_name: StringFilter
  id: UuidFilter
  role: EnumRoleFilter
  updated_at: DateTimeFilter
  validated: BoolFilter
}

input UserWhereUniqueInput {
  document: String
  email: EmailAddress
  id: UUID
}

type UsersCursorConnection {
  count: Float!
  edges: [UsersEdge!]!
  nodes: [UserModel!]!
  pageInfo: PageInfoCursor!
  totalCount: Float!
}

type UsersEdge {
  cursor: String!
  node: UserModel!
}

type UsersOffsetConnection {
  count: Float!
  nodes: [UserModel!]!
  pageInfo: PageInfoOffset!
  totalCount: Float!
}

input UuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidFilter
  notIn: [String!]
}